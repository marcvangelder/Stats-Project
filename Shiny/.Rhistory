from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
from vetiver import VetiverModel
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(model_board, "model")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(model_board, "v")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(model_board, "penguin_model")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(model_board, "model")
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(model_board, "model")
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(model_board, "v")
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(model_board, "penguin_model")
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
#vetiver.prepare_docker(model_board, v)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
#vetiver.prepare_docker(model_board, v)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
shiny::runApp('project/Shiny')
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
#vetiver.prepare_docker(model_board, v)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
pip install vetiver
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
#vetiver.prepare_docker(model_board, v)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
#vetiver.prepare_docker(model_board, v)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
renv::status()
renv::init()
reticulate::repl_python()
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
#vetiver.prepare_docker(model_board, v)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder, board_temp
import uvicorn
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
#app.run(port = 8080)
#vetiver.prepare_docker(model_board, v)
quit
shiny::runApp('Shiny')
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
# Install and load the renv package
#install.packages("renv")
#library(renv)
#renv::init()
#renv::status()
#install.packages("palmerpenguins", dependencies = TRUE, type = "binary")
#install.packages("dplyr", dependencies = TRUE, type = "binary")
#install.packages("ggplot2", dependencies = TRUE, type = "binary")
#library(palmerpenguins)
#library(dplyr)
#library(ggplot2)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
#install.packages("palmerpenguins", dependencies = TRUE, type = "binary")
#install.packages("dplyr", dependencies = TRUE, type = "binary")
#install.packages("ggplot2", dependencies = TRUE, type = "binary")
install.packages("duckdb", dependencies = TRUE, type = "binary")
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
install.packages("duckdb", dependencies = TRUE, type = "binary")
install.packages("duckdb", dependencies = TRUE, type = "binary")
#install.packages("palmerpenguins", dependencies = TRUE, type = "binary")
#install.packages("dplyr", dependencies = TRUE, type = "binary")
#install.packages("ggplot2", dependencies = TRUE, type = "binary")
install.packages("duckdb", dependencies = TRUE, type = "binary")
install.packages("duckdb", dependencies = TRUE, type = "binary")
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
shiny::runApp('Shiny')
runApp('Shiny')
install.packages("shiny")
install.packages("shiny")
shiny::runApp('~/project/Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
source("~/project/Shiny/app.R")
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
