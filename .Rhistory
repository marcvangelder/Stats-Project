library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
reticulate::repl_python()
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(palmerpenguins)
library(dplyr)
# Install and load the renv package
install.packages("renv")
# Install and load the renv package
install.packages("renv")
# Install and load the renv package
install.packages("renv", dependencies = TRUE, type = "binary")
library(renv)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
install.packages("palmerpenguins", dependencies = TRUE, type = "binary")
# Install and load the renv package
install.packages("renv", dependencies = TRUE, type = "binary")
# Install and load the renv package
install.packages("renv", dependencies = TRUE, type = "binary")
# Install and load the renv package
install.packages("renv")
# Install and load the renv package
install.packages("renv", dependencies = TRUE, type = "binary")
install.packages("palmerpenguins", dependencies = TRUE, type = "binary")
# Install and load the renv package
install.packages("renv", dependencies = TRUE, type = "binary")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from palmerpenguins import penguins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```{python}
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
renv::snapshot()
quit
# Install and load the renv package
install.packages("renv")
library(renv)
renv::snapshot()
Y
renv::snapshot()
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Create an API for model predictions
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for model predictions
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
import pins
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
# Initialize VetiverModel with your model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
# Initialize VetiverModel with your model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create a board for storing the model
board = pins.board_create("data/model")
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
# Initialize VetiverModel with your model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create a board for storing the model
board = pins.board_create("data/model")
# Pin the VetiverModel to the board
pins.pin(board, 'penguin_model', v)
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for model predictions
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, VetiverAPI
import pins
# Create a board for storing the model
board = pins.board_create("data/model")
# Pin the VetiverModel to the board
pins.pin(board, 'penguin_model', v)
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for model predictions
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
# Create a board for storing the model
board = pins.board_create("data/model")
# Pin the VetiverModel to the board
pins.pin(board, 'penguin_model', v)
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for model predictions
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
# Create a board for storing the model
board = pins.board_create("data/model")
# Pin the VetiverModel to the board
pins.pin(board, 'penguin_model', v)
b = pins.board_folder('data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model')
# Create an API for model predictions
app = VetiverAPI(v, check_prototype=True)
# Run the API
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, VetiverAPI
import pins
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
# Initialize VetiverModel with your model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v.save('data/model')  # Save the model in the /data/model folder
# Create an API from the model
app = VetiverAPI(v_from_pin, check_prototype=True)
# Run the API
app.run(port=8080)
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v.save('data/model')  # Save the model in the /data/model folder
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API from the model
app = VetiverAPI(v_from_pin, check_prototype=True)
# Run the API
app.run(port=8080)
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API from the model
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API from the model
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API from the model
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
reticulate::repl_python()
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API from the model
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, VetiverAPI
import pins
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
# Initialize VetiverModel with your model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Step 1: Save the model outside the bundle using vetiver
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API from the model
app = VetiverAPI(v, check_prototype=True)
# Run the API
app.run(port=8080)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver.vetiver_pin_write(b,v)
v = vetiver.VetiverModel.from_pin(b,'penguin_model')
app = vetiver.VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, VetiverAPI
import pins
# Get Data
df = penguins.load_penguins().dropna()
df.head(3)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
# Initialize VetiverModel with your model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver.vetiver_pin_write(b,v)
v = vetiver.VetiverModel.from_pin(b,'penguin_model')
app = vetiver.VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
# Define Features and Target
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
# Train the Model
model = LinearRegression().fit(X, y)
# Initialize VetiverModel with your model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver.vetiver_pin_write(b,v)
v = vetiver.VetiverModel.from_pin(b,'penguin_model')
app = vetiver.VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
